import React from 'react';
import type { Curriculum, QuizResult } from '../types';
import { CheckCircleIcon, CloseIcon, LogoIcon, SaveIcon } from './icons';
import VoiceSettings from './VoiceSettings';
import ApiSettings from './ApiSettings';

interface SidebarProps {
  curriculum: Curriculum;
  activeView: string;
  setActiveView: (view: string) => void;
  completedModules: Set<string>;
  quizResults: Record<string, QuizResult>;
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  onSaveProgress: () => void;
  saveStatus: 'idle' | 'saving' | 'saved';
  onReturnToMainMenu: () => void;
}

const Sidebar: React.FC<SidebarProps> = ({ curriculum, activeView, setActiveView, completedModules, quizResults, isOpen, setIsOpen, onSaveProgress, saveStatus, onReturnToMainMenu }) => {
  const NavLink: React.FC<{ id: string; children: React.ReactNode; completed?: boolean }> = ({ id, children, completed }) => {
    const isActive = activeView === id;
    return (
      <li>
        <a
          href="#"
          onClick={(e) => {
            e.preventDefault();
            setActiveView(id);
            setIsOpen(false);
          }}
          className={`flex items-center justify-between p-3 rounded-lg text-lg transition-colors duration-200 ${
            isActive ? 'bg-indigo-600 text-white font-semibold' : 'hover:bg-slate-200'
          }`}
        >
          <span className="truncate">{children}</span>
          {completed && <CheckCircleIcon className="h-6 w-6 text-green-500 flex-shrink-0 ml-2" />}
        </a>
      </li>
    );
  };

  return (
    <>
      <div
        className={`fixed inset-0 bg-black bg-opacity-50 z-30 transition-opacity lg:hidden ${
          isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'
        }`}
        onClick={() => setIsOpen(false)}
      ></div>
      <aside
        className={`fixed top-0 left-0 h-full w-72 bg-white border-r border-slate-200 p-6 flex flex-col z-40 transform transition-transform duration-300 ease-in-out lg:relative lg:translate-x-0 lg:w-80 lg:flex-shrink-0 ${
          isOpen ? 'translate-x-0' : '-translate-x-full'
        }`}
      >
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
             <LogoIcon className="h-10 w-10 text-indigo-600" />
            <h1 className="text-xl font-bold text-slate-800 truncate">
              {curriculum.subject}
            </h1>
          </div>
          <button onClick={() => setIsOpen(false)} className="lg:hidden text-slate-500 hover:text-slate-800">
            <CloseIcon className="h-6 w-6" />
          </button>
        </div>

        <nav className="flex-1 overflow-y-auto">
          <ul className="space-y-2">
            <NavLink id="overview">Program Overview</NavLink>
            <hr className="my-4" />
            <h2 className="px-3 py-1 text-sm font-semibold text-slate-500 uppercase tracking-wider">Modules</h2>
            {curriculum.modules.map(module => (
              <NavLink key={`module-${module.moduleNumber}`} id={`module-${module.moduleNumber}`} completed={completedModules.has(`module-${module.moduleNumber}`)}>
                {`Module ${module.moduleNumber}: ${module.title}`}
              </NavLink>
            ))}
            <hr className="my-4" />
            <h2 className="px-3 py-1 text-sm font-semibold text-slate-500 uppercase tracking-wider">Assessment</h2>
            <NavLink id="final-test" completed={!!quizResults['final-test']}>Final Test</NavLink>
          </ul>
        </nav>
        
        <div className="mt-auto pt-6 space-y-3">
          <button
            onClick={onSaveProgress}
            disabled={saveStatus !== 'idle'}
            className="w-full flex items-center justify-center gap-2 px-4 py-3 rounded-lg font-semibold text-lg transition-colors
                       bg-slate-100 text-slate-700 hover:bg-slate-200
                       disabled:bg-green-100 disabled:text-green-700"
          >
            <SaveIcon className="h-6 w-6" />
            <span>
              {saveStatus === 'idle' && 'Save Progress'}
              {saveStatus === 'saving' && 'Saving...'}
              {saveStatus === 'saved' && 'Progress Saved!'}
            </span>
          </button>
          
          <button
            onClick={onReturnToMainMenu}
            className="w-full flex items-center justify-center gap-2 px-4 py-3 rounded-lg font-semibold text-lg transition-colors
                       bg-indigo-100 text-indigo-700 hover:bg-indigo-200"
          >
            <LogoIcon className="h-6 w-6" />
            <span>New Subject</span>
          </button>
        </div>

        {/* Settings */}
        <div className="space-y-4">
          <VoiceSettings />
          <ApiSettings />
        </div>

        <footer className="mt-4 text-center text-xs text-slate-400">
            <p>Generated by Opal.</p>
            <p>Powered by Google.</p>
        </footer>
      </aside>
    </>
  );
};

export default Sidebar;
